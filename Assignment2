import numpy as np

#  matrix= ([[1,-2,3,4,11],
#          [1,0,-1,1,-4],
 #         [2,-2,2,5,7],
 #         [0,-7,3,1,3]])
#Mehdi Akhundzada


def gaussElimination(matrix): 
  

    np.asarray(matrix)
  
    #print(matrix.transpose())


    matrix = matrix.astype(float) #ensure the datatype is float
    print  ("the initial matrix:")

    
    print (matrix)
    if matrix[0,0] == 0.0:
        raise Exception("First row should contain non zero elements")
    n,m = matrix.shape
    print ("row:",n,"column:",m)
    #start the elimination phase
    for i in range(0,n):#row
        for j in range(i+1,n):
            if matrix[j,i] != 0.0:
                print ("using row ",i,"as pivot and row ",j,"as target")
                multiplier = matrix[j,i]/matrix[i,i]
                #print matrix[i,k],matrix[k,k],multiplier 
                #just to verbose multiplier process
                matrix[j,i:m]=matrix[j,i:m] - multiplier*matrix[i,i:m] 
                print (matrix)
                
    #start the backsubstitution phase
    x = []
    substractor = 0.0
    for i in range(n-1,-1,-1): #row
        #print ("i",i) #just for debugging
        for j in range(0,n-i): #column
         #   print ("j",j) #just for debugging
            if j==0:
                substractor = 0
            else:
                substractor = substractor + matrix[i,m-j-1]*x[j-1]
        x.append((matrix[i,m-1]-substractor)/matrix[i,i])
        print ("x",x)
    return x

    import gaussElimination
import numpy as np


a = np.array([[3, 7, 1,3,37],
 [1,-6, 6,9,11],
 [4, 4,-7,1,38],
[-1, 3, 8,2,-1]])
result = gaussElimination(a)
print ("the result is" ,result)


from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
import math
from matplotlib import cm
#https://matplotlib.org/3.1.0/gallery/mplot3d/surface3d.html
#https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.contour.html


X = np.arange(-5,5,0.25)
Y = np.arange(-5,5,0.25)
XX, YY = np.meshgrid(X,Y)

Z1 =(XX-1)**2+YY-10
Z2 =XX**2+YY**2+4*XX*XX+YY-40
#Z2 =4*XX*(math.cos(XX+YY))+XX**2+YY


fig = plt.figure()
ax = fig.gca(projection='3d')
surf = ax.plot_surface(XX, YY, Z1, cmap=cm.coolwarm,
                       alpha=0.5)
surfZ = ax.plot_surface(XX,YY,np.zeros(np.shape(Z1)), antialiased=False, alpha=0.2)
cp = ax.contour(X, Y, Z1, levels = 0, colors = 'red')
plt.show()

fig = plt.figure(block=False)
ax = fig.gca(projection='3d')
surf = ax.plot_surface(XX, YY, Z2, cmap=cm.summer,
                       antialiased=False, alpha=0.5)
surfZ = ax.plot_surface(XX,YY,np.zeros(np.shape(Z1)), antialiased=False, alpha=0.2)
cp = ax.contour(X, Y, Z2, levels = 0, colors = 'green')
plt.show()

fig = plt.figure()
ax = fig.gca()
ax.grid(color='#C0C0C0', linestyle='-', linewidth=0.5)
cp = ax.contour(X, Y, Z1, levels = 0, colors = 'red')
cp = ax.contour(X, Y, Z2, levels = 0, colors = 'green')
ax.set_aspect('equal', 'box')
plt.show()
